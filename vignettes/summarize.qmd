---
title: "Summarize Data"
knitr:
  opts_chunk: 
    collapse: true
    comment: '#>'
    dev: "ragg_png"
format: 
  html:
    toc: true
    html-math-method: katex
execute:
  cache: true
vignette: >
  %\VignetteIndexEntry{summarize}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r}
#| label: presetup
#| include: false
#| cache: false
library(apa7)
library(ftExtra)
library(flextable)
library(gt)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(purrr)
```

```{r setup}
<<presetup>>
```

The flextable and gt packages have many, many options and helper functions. The `tabulator`, `summarizor`, and `proc_freq` functions from the flextable package are particularly powerful ways of summarizing and describing data. Functions that automate your descriptive statistics tables for you (e.g., the amazing [gtsummary package](https://www.danieldsjoberg.com/gtsummary/index.html)) inevitably entail some level of compromise. It is unreasonable for a single function to anticipate the diversity of needs out there. Sometimes you need a table to be a particular way, and you need to do the heaving lifting yourself. After all that, the `apa_style` function will get a flextable or gt table close to APA style. You may need to do some additional styling with flextable or gt as well.

Here I create a table of means, standard deviations, and sample sizes for several variables across groups. The particulars are not so important here, just that flextable and gt can do most of the rest after that. 

# Data Setup

```{r dataprocessing}
d <- diamonds %>% 
  select(cut, price, carat, depth, table) %>% 
  arrange(cut) %>% 
  rename_with(str_to_title) %>% 
  pivot_longer(where(is.numeric), names_to = "Variable") %>% 
  summarise(
    M = mean(value, na.rm = TRUE),
    SD = sd(value, na.rm = TRUE),
    n = n(),
    .by = c(Variable, Cut)) %>% 
  pivot_longer(c(M, SD)) %>% 
  unite(Variable, Variable, name) %>%
  pivot_wider(names_from = Variable) 
```

# Flextable

The flextable package has a `theme_apa` function that can get things very close to full APA style. With a little extra care, the formatting in @tbl-flextable is pretty much perfect. 

```{r}
#| label: tbl-flextable
#| tbl-cap: Price, Carat, Depth, Table Using `flextable`
flextable::flextable(d) |>
  theme_apa() |>
  flextable::separate_header() |>
  colformat_double(j = 3:4,
                   prefix = "$",
                   digits = 2) |>
  italic(j = -1, i = 2, part = "header") |>
  italic(j = 2, i = 1, part = "header") |>
  align(align = "center", part = "header") |>
  align(j = 1) |>
  surround(
    i = 2,
    part = "header",
    border.top = flextable::fp_border_default(
      color = "black",
      width = 1)
  ) 

```



## The `apa_flextable` function

I prefer related columns to separated by a small break in the headers, so I use the `add_break_columns` function to insert the breaks after each column ending with `_SD` (omitting the last instance). The `apa_flextable` function handles the rest automatically except for the dollar signs, which flextable can add later. @tbl-apaflextable also decimal aligns all the numbers, though this is apparent in column `n` only.

```{r loadftextra, include=FALSE}
library(ftExtra)
```

```{r}
#| label: tbl-apaflextable
#| tbl-cap: Price, Carat, Depth, Table Using `apa_flextable`
d |> 
  add_break_columns(ends_with("_SD"), omit_last = TRUE) |>
  apa_flextable() |> 
  colformat_char(j = 3:4, prefix = "$") 

```

# gt

The gt package is not really supported by the apa7 package, but I include this here because I did not want to delete my initial efforts. Getting gt to have APA style borders took me a long time to figure out because of the complex rules by which borders overwrite each other. The `apa_style` function saves me from having to figure it all out repeatedly when working with gt tables.

```{r}
#| label: tbl-gt
#| tbl-cap: Price, Carat, Depth, Table Using gt
gt(d) %>%
  fmt_number(decimals = 2, columns = is.double) %>%
  fmt_number(columns = is.integer, decimals = 0) %>%
  fmt_currency(columns = contains("Price")) %>% 
  tab_spanner_delim(delim = "_") %>%
  cols_align(align = "center", columns = -1) %>%
  cols_align(align = "left", columns = "Cut")  %>%
  tab_style(cell_text(style = "italic"), 
            locations = cells_column_labels(-Cut)) %>%
  tab_style(cell_text(align = "right"), 
            locations = cells_body(-Cut)) %>%
  apa_style(horizontal_padding = 10) %>% 
  tab_options(table.align = "left")
```

