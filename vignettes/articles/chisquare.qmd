---
title: "Contingency Tables"
vignette: >
  %\VignetteIndexEntry{Contingency Tables}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
knitr:
  opts_chunk:
    collapse: true
    comment: '#>'
---

```{r}
#| label: setup
#| include: false
library(apa7)
library(dplyr)
library(tidyr)
library(flextable)
library(ftExtra)
```

```{r}
#| label: setup
```

# Data

```{r}
#| label: data
d <- mtcars |>
  select(Gears = gear, Transmission = am) |>
  mutate(Transmission = factor(Transmission, labels = c("Automatic", "Manual")))
```

# The `apa_chisq` contingency table function

The default output of the `apa_chisq` function is a contingency table with a chi-square test of independence in the table note. The output is a flextable, which can be modified with flextable commands.

```{r}
#| label: apachisq
apa_chisq(d)
```

# Styling Options

The table can be styled in many ways:

```{r}
#| label: options
apa_chisq(
  d,
  font_size = 16,
  line_spacing = 3,
  text_color = "darkred",
  border_width = 2,
  border_color = "gray",
  font_family = "Arial"
)
```

```{r}
#| label: customization
# No note
apa_chisq(d, note = NA)
# Custom note
apa_chisq(
  d,
  note = "This is a *custom* note written in **markdown** $x > \\omega$."
)

```

# What if I want something completely different?

There are a lot of options out there. The flextable package has the `proc_freq` function, which has the ability to include row, column, and total percentages in the table.

```{r}
#| label: procfreq
mtcars %>%
  proc_freq(row = "gear", col = "vs") %>%
  theme_apa()
```

These can be turned off selectively:

```{r}
#| label: procfreqoptions
mtcars %>%
  proc_freq(
    row = "gear",
    col = "vs",
    include.row_percent = FALSE,
    include.column_percent = FALSE,
    include.table_percent = FALSE
  ) %>%
  apa_style(table_width = .5)
```

The flextable package's `tabulator` function has considerable power in creating a wide variety of descriptive tables. In general, the `tabulator` function requires that you calculate the statistics first, and then you specify where they should go.

Here I calculate the means, standard deviations, and sample sizes within each cell of a contingency table.

```{r}
d_tension <- warpbreaks |>
  summarise(
    m = mean(breaks, na.rm = TRUE),
    sd = sd(breaks, na.rm = TRUE),
    n = n(),
    .by = c(wool, tension)
  ) %>%
  rename(Wool = wool) |>
  mutate(
    tension = factor(
      tension,
      labels = paste(c("Low", "Medium", "High"), "Tension")
    )) 
  
d_tension |> 
  flextable::tabulator(
    rows = c("Wool"),
    columns = "tension",
    M = as_paragraph(m),
    SD = as_paragraph(sd),
    N = as_paragraph(n)
  ) |> 
  flextable::as_flextable() |>
  italic(i = 2, part = "header") |>
  align(j = 1, align = "center") |> 
  theme_apa()
```

# Processing Data Yourself

What if you want it to look a little different? Unfortunately, you might have to do some of the heavy lifting yourself. The `pivot_wider_name_first` function is a wrapper around `tidyr::pivot_wider` that prints and sorts column names as "name_variable" instead of "variable_name". I wanted a shortcut because I frequently needed to make a shortcut for setting `names_glue = "{tension}_{.value}"` and `names_vary = "slowest"` when `names_from = "tension"`.

A subtle difference in this version of the table is that the columns are decimal aligned, which is evident in the standard deviation column.

Also, whereas previously the "stub header" (Wool column) was middle aligned, it is now top aligned, which is consistent with comparable examples in the *APA Style Manual*. I am not sure if this is a real rule in APA style, and I actually prefer middle alignment for situations like this.

```{r warpbreaks}
d_tension |> 
  rename(M = m, SD = sd) |> 
  pivot_wider_name_first(
    values_from = c(M, SD, n),
    names_from = tension
  ) |>
  add_break_columns(ends_with("_n"), omit_last = TRUE) |>
  apa_flextable(column_formats = column_formats(accuracy = .1)) |>
  align(j = 1, align = "center") 
```



