---
title: "Contingency Tables"
vignette: >
  %\VignetteIndexEntry{Contingency Tables}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
knitr:
  opts_chunk:
    collapse: true
    comment: '#>'
---

```{r}
#| label: setup
#| include: false
library(apa7)
library(dplyr)
library(flextable)
library(ftExtra)
```


```{r}
#| label: import
<<setup>>
d <- mtcars |> 
  select(Gears = gear, Transmission = am) |> 
  mutate(Transmission = factor(Transmission, labels = c("Automatic", "Manual")))
```


The default output of the `apa_chisq` function is a contingency table with a chi-square test of independence in the table note. The output is a flextable, which can be modified with flextable commands.

```{r}
apa_chisq(d) 
```

The table can be styled in many ways:

```{r}
apa_chisq(
  d,
  font_size = 16,
  line_spacing = 3,
  text_color = "darkred",
  border_width = 2,
  border_color = "gray",
  font_family = "Arial"
)
```

```{r}
# Automatic chi square note
apa_chisq(d)
# No note
apa_chisq(d, note = NA)
# Custom note
apa_chisq(d, note = "This is a *custom* note written in **markdown** $x > \\omega$.")

```

# What if I want something completely different?

There are a lot of options out there. The flextable package has the `proc_freq` function, which has the ability to include row, column, and total percentages in the table. 

```{r}
mtcars %>% 
  proc_freq(row = "gear", 
            col = "vs")  %>%
  theme_apa()
```

These can be turned off selectively:

```{r}
mtcars %>% 
  proc_freq(row = "gear", 
            col = "vs",
            include.row_percent = FALSE, 
            include.column_percent = FALSE, 
            include.table_percent = FALSE)  %>%
  apa_style(table_width = .5) 
```


What if you want it to look a little different? Unfortunately, you might have to do some heavy lifting yourself. The flextable package's `tabulator` function has considerable power in creating a wide variety of descriptive tables. In general, the `tabulator` function requires that you calculate the statistics first, and then you specify where they should go.

Here I calculate the means, standard deviations, and sample sizes of a variable.


```{r}

mytable <- warpbreaks %>% 
  summarise(
    Mean = mean(breaks, na.rm = TRUE),
    stdev = sd(breaks, na.rm = TRUE),
    sample_size = sum(!is.na(breaks)),
    .by = c(wool, tension)
  ) %>%
  rename(Wool = wool) %>% 
  mutate(tension = factor(tension, labels = c("Low", "Medium", "High"))) %>% 
  flextable::tabulator(
    x = .,
    rows = "Wool",
    columns = "tension",
    M = as_paragraph(Mean),
    SD = as_paragraph(stdev),
    n = as_paragraph(sample_size)
    
  ) %>% 
  flextable::as_flextable()


my_column_names <- mytable$col_keys
header_row <- c("", rep("Tension", length(my_column_names) - 1)) %>% 
  as.list()
names(header_row) <- my_column_names

mytable %>%   
flextable::theme_apa() %>% 
  flextable::italic(i = 2, part = "header") %>% 
  flextable::add_header(values = header_row) %>% 
  flextable::merge_h(i = 1, "header") %>% 
  flextable::border(
    i = 1, 
    j = 1, 
    border.bottom = flextable::fp_border_default(
      style = "none", 
      color = "white"), 
    part = "header")

```


